{"version":3,"sources":["components/SearchCar.js","components/DetailsCar.js","components/ListCar.js","components/ViewsCar.js","components/ModalCar.js","components/SuccessCarOrder.js","components/LoaderSpiner.js","App.js","serviceWorker.js","index.js"],"names":["SearchCar","_ref","textInput","handleChange","handleSubmit","react_default","a","createElement","react","onSubmit","type","value","onChange","placeholder","DetailsCar","cars","imageNumber","handlePhoneShow","isActivePhone","handleModalOpen","model","year","owner","href","phone","className","onClick","ListCar","isActiveCar","handleChangeShowImage","item","index","activeElem","name","ViewsCar","_this$props","this","props","handleButtonShowMore","itemsToShowCar","expanded","image","carModelList","filter","toUpperCase","indexOf","toLowerCase","slice","map","components_ListCar","key","src","alt","components_DetailsCar","Component","ModalCar","handleModalClose","isModalOpen","handleSuccessOrder","SuccessCarOrder","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hideSuccessOrder","myRef","current","remove","React","createRef","_this2","hideOrder","setTimeout","clearTimeout","ref","Date","toLocaleString","LoaderSpiner","App","event","preventDefault","console","log","setState","target","state","isOrderSuccess","length","loaderAsyncCall","Promise","resolve","filterInputText","isLoading","then","_this$state","components_LoaderSpiner","components_SearchCar","components_ViewsCar","components_SuccessCarOrder","components_ModalCar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.144155bf.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst SearchCar = ({ textInput, handleChange, handleSubmit }) => {\r\n    return(\r\n        <Fragment>\r\n            <form onSubmit={ handleSubmit } >\r\n                <h1>Find your car: </h1>\r\n                <input type=\"text\" value={ textInput } onChange={ handleChange } placeholder=\"Search...\" />\r\n            </form>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nSearchCar.propTypes = {\r\n    textInput: PropTypes.string.isRequired,\r\n    handleChange: PropTypes.func.isRequired,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchCar;","import React, { Fragment } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst DetailsCar = ({ cars, imageNumber, handlePhoneShow, isActivePhone, handleModalOpen }) => {\r\n    return(\r\n        <Fragment>\r\n\r\n            <li>Model - <strong>{ cars[imageNumber].model }</strong></li>\r\n            <li>Year - <strong>{ cars[imageNumber].year }</strong></li>\r\n            <li>Owner - <strong>{ cars[imageNumber].owner }</strong></li>\r\n            <a href={cars[imageNumber].phone} className={ isActivePhone ? 'car__detail-phone active__phone' : 'car__detail-phone' }>{cars[imageNumber].phone}</a>\r\n\r\n            <div className=\"car__detail-buttons\">\r\n                <button onClick={ handlePhoneShow }>Show phone</button>\r\n                <button onClick={ handleModalOpen }>Buy car</button>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nDetailsCar.propTypes = {\r\n    cars: PropTypes.array.isRequired,\r\n    imageNumber: PropTypes.number.isRequired,\r\n    handlePhoneShow: PropTypes.func.isRequired,\r\n    isActivePhone: PropTypes.bool.isRequired,\r\n    handleModalOpen: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default DetailsCar;","import React, { Fragment } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListCar = ({ isActiveCar, handleChangeShowImage, item, index }) => {\r\n    const activeElem = isActiveCar === index ? 'active__car' : '';\r\n\r\n    return (\r\n        <Fragment>\r\n            <li onClick={() => handleChangeShowImage(index)} className={activeElem}>{item.name} - {item.model}</li>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nListCar.propTypes = {\r\n    isActiveCar: PropTypes.number.isRequired,\r\n    handleChangeShowImage: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default ListCar;","import React, { Component } from 'react';\r\nimport DetailsCar from './DetailsCar';\r\nimport ListCar from './ListCar';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ViewsCar extends Component {\r\n    render() {\r\n        const { cars, textInput, imageNumber, isActiveCar, handleChangeShowImage, handlePhoneShow, isActivePhone, handleModalOpen, handleButtonShowMore, itemsToShowCar, expanded } = this.props;\r\n        const image  = this.props.cars;\r\n        const name  = this.props.cars;\r\n\r\n        const filterInputText = cars.filter(item => item.name.toUpperCase().indexOf(textInput) > -1 ||\r\n                                            item.name.toLowerCase().indexOf(textInput) > -1 ||\r\n                                            item.model.toUpperCase().indexOf(textInput) > -1 ||\r\n                                            item.model.toLowerCase().indexOf(textInput) > -1);\r\n\r\n        const carModelList = filterInputText.slice(0, itemsToShowCar).map((item, index) =>\r\n            <ListCar\r\n                key={index}\r\n                index={index}\r\n                item={item}\r\n                handleChangeShowImage={handleChangeShowImage}\r\n                isActiveCar={isActiveCar}\r\n            /> );\r\n\r\n        return (\r\n            <div className=\"viewsCar__wrap\">\r\n                <ul className=\"car__list\">\r\n                    { carModelList }\r\n\r\n                    <span onClick={ handleButtonShowMore }>{ expanded ? 'Show less': 'Show more'}</span>\r\n                </ul>\r\n\r\n                <div className=\"car__image\">\r\n                    <h2>{ name[imageNumber].name }</h2>\r\n                    <img src={ image[imageNumber].image } alt={ image[imageNumber].image } />\r\n                </div>\r\n\r\n                <div className=\"car__detail\">\r\n                    <ul className=\"car__detail-list\">\r\n                        <DetailsCar\r\n                            cars={cars}\r\n                            imageNumber={imageNumber}\r\n                            handlePhoneShow={ handlePhoneShow }\r\n                            isActivePhone={ isActivePhone }\r\n                            handleModalOpen={ handleModalOpen }\r\n                        />\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nViewsCar.propTypes = {\r\n    cars: PropTypes.array.isRequired,\r\n    textInput: PropTypes.string.isRequired,\r\n    imageNumber: PropTypes.number.isRequired,\r\n    handleChangeShowImage: PropTypes.func.isRequired,\r\n    handlePhoneShow: PropTypes.func.isRequired,\r\n    isActivePhone: PropTypes.bool.isRequired,\r\n    isActiveCar: PropTypes.number.isRequired,\r\n    handleModalOpen: PropTypes.func.isRequired,\r\n    itemsToShowCar: PropTypes.number.isRequired,\r\n    expanded: PropTypes.bool.isRequired,\r\n    handleButtonShowMore: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ViewsCar;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ModalCar = ({ cars, imageNumber, handleModalClose, isModalOpen, handleSuccessOrder }) => {\r\n    return (\r\n        <div className={ isModalOpen ? 'modalBackdrop modalBackdrop-active' : 'modalBackdrop' }>\r\n\r\n            <div className=\"cars__modal\">\r\n\r\n                <div className=\"cars__title\">\r\n                    <h2>Do you want by this car?</h2>\r\n                    <span onClick={ handleModalClose }>X</span>\r\n                </div>\r\n                \r\n                <ul className=\"cars__modal-items\">\r\n                    <li>Your car - <strong>{ cars[imageNumber].name }</strong></li>\r\n                    <li>Model - <strong>{ cars[imageNumber].model }</strong></li>\r\n                    <li>Year - <strong>{ cars[imageNumber].year }</strong></li>\r\n                    <li>Owner - <strong>{ cars[imageNumber].owner }</strong></li>\r\n                </ul>\r\n                \r\n                <div className=\"car__modal-buttons\">\r\n                    <button onClick={ handleSuccessOrder }>Buy</button>\r\n                    <button onClick={ handleModalClose }>Cancel</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nModalCar.propTypes = {\r\n    cars: PropTypes.array.isRequired,\r\n    imageNumber: PropTypes.number.isRequired,\r\n    isModalOpen: PropTypes.bool.isRequired,\r\n    handleSuccessOrder: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ModalCar;","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass SuccessCarOrder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    hideSuccessOrder = () => {\r\n            this.myRef.current.remove();\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.hideOrder = setTimeout(() => this.hideSuccessOrder(), 8000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.hideOrder);\r\n    }\r\n    render() {\r\n        const { cars, imageNumber } = this.props;\r\n\r\n        return(\r\n            <div className=\"success__order\" ref={ this.myRef }>\r\n                <p>Success order: { cars[imageNumber].name } { cars[imageNumber].model } - {   new Date().toLocaleString() } </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSuccessCarOrder.propTypes = {\r\n    cars: PropTypes.array.isRequired,\r\n    imageNumber: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SuccessCarOrder;","import React from 'react';\r\n\r\nconst LoaderSpiner = () => {\r\n    return(\r\n            <div className=\"spinner\">\r\n                <div className=\"cube1\"></div>\r\n                <div className=\"cube2\"></div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default LoaderSpiner;","import React, { Component } from 'react';\nimport SearchCar from './components/SearchCar';\nimport ViewsCar from './components/ViewsCar';\nimport ModalCar from './components/ModalCar';\nimport SuccessCarOrder from './components/SuccessCarOrder';\nimport LoaderSpiner from './components/LoaderSpiner';\nimport './App.css';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            textInput: '',\n            filterInputText: '',\n            imageNumber: 0,\n            isActiveCar: 0,\n            isActivePhone: false,\n            isModalOpen: false,\n            isOrderSuccess: false,\n            itemsToShowCar: 5,\n            expanded: false,\n            isLoading: true,\n\n            cars: [\n                { name: \"Audi\", model: \"A7\", owner: \"Evgeniy\", year: 2019, phone: \"+7-907-321-54-67\", image: \"build/assets/audi-a7.jpg\" },\n                { name: \"Hyundai\", model: \"Sonata\", owner: \"Andrey\", year: 2018, phone: \"+7-929-123-45-67\", image: \"build/assets/Hyunday-sonata.jpg\" },\n                { name: \"Infinity\", model: \"FX\", owner: \"Denis\", year: 2017, phone: \"+7-109-435-93-41\", image: \"build/assets/infinity.jpg\" },\n                { name: \"Mercedes\", model: \"C-klasse\", owner: \"Vitaliy\", year: 2017, phone: \"+7-600-554-45-34\", image: \"build/assets/mercedes-c-klasse.jpg\" },\n                { name: \"Kia\", model: \"Optima\", owner: \"Aleksandr\", year: 2018, phone: \"+7-900-643-89-33\", image: \"build/assets/kia-optima.jpg\" },\n                { name: \"Honda\", model: \"Accord\", owner: \"Denis\", year: 2015, phone: \"+7-501-644-56-77\", image: \"build/assets/honda-accord.jpg\" },\n                { name: \"Toyota\", model: \"Camry\", owner: \"Denis\", year: 2014, phone: \"+7-610-998-34-87\", image: \"build/assets/toyota-camry.jpg\" },\n\n            ],\n        };\n        this.myRef = React.createRef();\n    }\n\n  handleSubmit = (event) => {\n      event.preventDefault();\n      console.log('click');\n  };\n\n  //  change input value\n  handleChange = (event) => {\n    this.setState({\n      textInput: event.target.value,\n    })\n  };\n\n  // change  image  to  click\n  handleChangeShowImage = (index) => {\n      this.setState({\n          imageNumber: index,\n          isActiveCar: index,\n      })\n  };\n\n  //  show  phone\n  handlePhoneShow = () => {\n      this.setState({ isActivePhone: !this.state.isActivePhone })\n  };\n  //  show modal\n  handleModalOpen = () => {\n      this.setState({ isModalOpen: true })\n  };\n\n  //  close modal\n  handleModalClose = () => {\n      this.setState({ isModalOpen: false })\n  };\n\n  //  show  success order  card\n  handleSuccessOrder = () => {\n      this.setState({\n          isOrderSuccess: true,\n          isModalOpen: false\n      })\n  };\n\n  //  button  show more\n  handleButtonShowMore = () => {\n      this.state.itemsToShowCar === 5 ?\n          ( this.setState({ itemsToShowCar: this.state.cars.length, expanded: true }) ) :\n          (  this.setState({ itemsToShowCar: 5, expanded: false }) )\n  };\n\n  //  start  loader\n  loaderAsyncCall = () => {\n      return new Promise((resolve) => setTimeout(() => resolve(), 2500));\n  };\n\n  componentDidMount() {\n      // this simulates an async action, after which the component will render the content\n      this.loaderAsyncCall().then(() => this.setState({ isLoading: false }));\n  }\n\n\n    render() {\n    const { textInput, cars, imageNumber, isActiveCar, isModalOpen, isOrderSuccess, itemsToShowCar, expanded, isLoading } = this.state;\n\n        if(isLoading) { // if your component doesn't have to wait for an async action, remove this block\n            return <LoaderSpiner /> ; // render null when app is not ready\n        }\n\n        return (\n        <div className=\"wrapper\">\n\n            <SearchCar\n                textInput={ textInput }\n                handleChange={ this.handleChange }\n                handleSubmit={ this.handleSubmit }\n            />\n          <hr/>\n\n          <ViewsCar\n              cars={ cars }\n              handleChangeShowImage={ this.handleChangeShowImage }\n              imageNumber={ imageNumber }\n              textInput={ textInput }\n              handlePhoneShow={ this.handlePhoneShow }\n              isActivePhone={ this.state.isActivePhone }\n              isActiveCar={ isActiveCar }\n              handleModalOpen={ this.handleModalOpen }\n              isModalOpen={ isModalOpen }\n              handleButtonShowMore={ this.handleButtonShowMore }\n              itemsToShowCar={ itemsToShowCar }\n              expanded={ expanded }\n          />\n\n            { isOrderSuccess ?  <SuccessCarOrder\n                isOrderSuccess={ isOrderSuccess }\n                imageNumber={ imageNumber }\n                cars={ cars }\n            /> : null }\n\n           <ModalCar\n                cars={ cars }\n                imageNumber={ imageNumber }\n                handleModalClose={ this.handleModalClose }\n                isModalOpen={ isModalOpen }\n                handleSuccessOrder={ this.handleSuccessOrder }\n            />\n\n        </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}